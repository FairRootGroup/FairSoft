--- src/PData.cc	2011-01-04 20:33:59.000000000 +0100
+++ src/PData.cc	2014-11-13 10:30:51.000000000 +0100
@@ -101,7 +101,7 @@
 #include "TLorentzVector.h"
 #include "TClass.h"
 #include "TMethodCall.h"
-#include "TCint.h"
+//#include "TCint.h"
 
 PSplash::PSplash() {
     if (gApplication)
--- src/PBatch.cc	2011-01-04 20:34:00.000000000 +0100
+++ src/PBatch.cc	2014-11-13 10:28:54.000000000 +0100
@@ -1626,7 +1626,7 @@
     //seeks for the internal method
     //returns a -1 if not found or invalid
 
-    TList *list;
+    const TList *list;
     if (flag==0)
 	list=  gROOT->GetClass("PParticle")->GetListOfAllPublicMethods();
     else if (flag==1)
--- src/PReaction.cc	2014-11-13 14:06:30.000000000 +0100
+++ src/PReaction.cc	2014-11-13 14:07:46.000000000 +0100
@@ -47,7 +47,7 @@
 
 const char * percent="\%";
 
-#include "Api.h"
+//#include "Api.h"
 #include "PData.h"
 #include "PReaction.h"
 #include "PUtils.h"
@@ -1762,6 +1762,7 @@
     }
 }
 
+/*
 void PReaction::SetUserSelection(void *f) {  // set user selection function
     userSelection=NULL;
     if (!f) return ;
@@ -1785,6 +1786,7 @@
     }
     (*userSelection)((PParticle*)-1);       // call once for eventual init work
 }
+*/
 
 Int_t CalledSelection(PParticle* p) { // interface for interactive user
                                       // selection function
@@ -1796,6 +1798,7 @@
     return (Int_t)result;
 } 
 
+/*
 void PReaction::SetUserAnalysis(void *f) { // set user analysis function
     userAnalysis=NULL;
     if (!f) return ;
@@ -1819,6 +1822,7 @@
     }
     (*userAnalysis)((PParticle**)-1,0);      // call once for eventual init work
 }
+*/
 
 Int_t CalledAnalysis(PParticle** p, Int_t n) { // interface for user
                                                // analysis function
--- src/PReaction.h	2014-11-13 10:32:21.000000000 +0100
+++ src/PReaction.h	2014-11-13 14:05:36.000000000 +0100
@@ -11,7 +11,7 @@
 #include "TFile.h"
 #include "TMethodCall.h"
 #include "PChannel.h"
-#include "G__ci.h"
+//#include "G__ci.h"
 
 #include "PDistributionManager.h"
 #include "PStdData.h"
@@ -203,6 +203,7 @@
 
     void SetMaxFileSize(Int_t bytes) {nMaxBytes = bytes;}  // set max file size
 
+/*
     Int_t testPointer(void* p2f) {   // determine type of pointer-to-function
 	// (see CINT reference manual for details) 
 	if (p2f==NULL) return -1;
@@ -212,6 +213,7 @@
 	printf("Pointer to function %s is of type %d\n",fname,ret);
 	return ret;
     }
+*/
 
     void SetWriteIndex(Bool_t flag) {
 	if (flag==kTRUE) writeINDEX = 1;
