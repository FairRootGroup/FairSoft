Index: source/digits+hits/src/TG4SDConstruction.cxx
===================================================================
--- source/digits+hits/src/TG4SDConstruction.cxx	(revision 669)
+++ source/digits+hits/src/TG4SDConstruction.cxx	(working copy)
@@ -181,7 +181,7 @@
   G4String token;
   while ( is >> token ) {
     if (VerboseLevel() > 1) {
-      G4cout << "Adding volume " << token <<  " in SD selection." << G4cout;
+      G4cout << "Adding volume " << token <<  " in SD selection." << G4endl;
     }  
     fSelection.insert(token);
   }  
Index: source/geometry/src/TG4Medium.cxx
===================================================================
--- source/geometry/src/TG4Medium.cxx	(revision 669)
+++ source/geometry/src/TG4Medium.cxx	(working copy)
@@ -74,7 +74,7 @@
 /// give a warning if medium material has been already defined
 
   if ( fMaterial && fMaterial != material ) {
-    G4cout << fMaterial->GetName() << " " << material->GetName() << G4cout;
+    G4cout << fMaterial->GetName() << " " << material->GetName() << G4endl;
     TG4Globals::Warning(
       "TG4Medium", "SetMaterial",
       "Reseting material " + TString(fMaterial->GetName()) + 

Index: source/global/src/TG4G3CutVector.cxx
===================================================================
--- source/global/src/TG4G3CutVector.cxx	(revision 669)
+++ source/global/src/TG4G3CutVector.cxx	(working copy)
@@ -73,13 +73,13 @@
 
   if ( cut == kPPCUTM && 
        value < ( 2.*CLHEP::electron_mass_c2 - TG4G3CutVector::Tolerance() ) )  {
-    TString message = "PPCUTM cut value ";
-    message += value;
-    message += " MeV is lower than 2*e_mass.";
-    TG4Globals::Warning(
-      "TG4G3CutVector", "CheckCutValue", 
-      message + TG4Globals::Endl() + 
-      TString("The cut will be ignored."));
+    //TString message = "PPCUTM cut value ";
+    //message += value;
+    //message += " MeV is lower than 2*e_mass.";
+    //TG4Globals::Warning(
+    //  "TG4G3CutVector", "CheckCutValue", 
+    //  message + TG4Globals::Endl() + 
+    //  TString("The cut will be ignored."));
     return false;
   }
 
Index: source/physics_list/include/TG4ComposedPhysicsMessenger.h
===================================================================
--- source/physics_list/include/TG4ComposedPhysicsMessenger.h	(revision 669)
+++ source/physics_list/include/TG4ComposedPhysicsMessenger.h	(working copy)
@@ -26,6 +26,7 @@
 class G4UIcmdWithADoubleAndUnit;
 class G4UIcmdWithoutParameter;
 class G4UIcmdWithAString;
+class G4UIcmdWithAnInteger;
 
 /// \ingroup physics_list
 /// \brief Messenger class that defines commands for Geant4 VMC composed 
@@ -41,6 +42,8 @@ class G4UIcmdWithAString;
 /// - /mcPhysics/printVolumeLimits [volName]
 /// - /mcPhysics/printGlobalCuts
 /// - /mcPhysics/printGlobalControls
+/// - /mcPhysics/g4NeutronHPVerbose
+/// - /mcPhysics/g4HadronicProcessStoreVerbose
 ///
 /// \author I. Hrivnacova; IPN Orsay
 
@@ -102,6 +105,12 @@ class TG4ComposedPhysicsMessenger : public G4UImessenger
 
     /// printGeneralControls command
     G4UIcmdWithoutParameter*    fPrintGlobalControlsCmd;
-};     
+
+    /// g4NeutronHPVerbose command
+    G4UIcmdWithAnInteger*       fG4NeutronHPVerboseCmd;
+
+    /// g4HadronicProcessStoreVerbose command
+    G4UIcmdWithAnInteger*       fG4HadronicProcessStoreVerboseCmd;
+};
 
 #endif //TG4_COMPOSED_PHYSICS_MESSENGER_H
Index: source/physics_list/src/TG4ComposedPhysicsMessenger.cxx
===================================================================
--- source/physics_list/src/TG4ComposedPhysicsMessenger.cxx	(revision 669)
+++ source/physics_list/src/TG4ComposedPhysicsMessenger.cxx	(working copy)
@@ -26,6 +26,9 @@
 #include <G4UIcmdWithADoubleAndUnit.hh>
 #include <G4UIcmdWithoutParameter.hh>
 #include <G4UIcmdWithAString.hh>
+#include <G4UIcmdWithAnInteger.hh>
+#include <G4NeutronHPManager.hh>
+#include <G4HadronicProcessStore.hh>
 
 //______________________________________________________________________________
 TG4ComposedPhysicsMessenger::TG4ComposedPhysicsMessenger(
@@ -35,7 +38,9 @@ TG4ComposedPhysicsMessenger::TG4ComposedPhysicsMessenger(
     fRangeGammaCutCmd(0),   
     fRangeElectronCutCmd(0),
     fRangePositronCutCmd(0),
-    fRangeAllCutCmd(0)     
+    fRangeAllCutCmd(0),
+    fG4NeutronHPVerboseCmd(0),
+    fG4HadronicProcessStoreVerboseCmd(0)
 { 
 /// Standard constructor
 
@@ -113,6 +118,21 @@ TG4ComposedPhysicsMessenger::TG4ComposedPhysicsMessenger(
   fPrintGlobalControlsCmd
     ->SetGuidance("Print global VMC (G3-like) process controls.");
   fPrintGlobalControlsCmd->AvailableForStates(G4State_Idle);
+
+  fG4NeutronHPVerboseCmd
+    = new G4UIcmdWithAnInteger("/mcPhysics/g4NeutronHPVerbose", this);
+  fG4NeutronHPVerboseCmd->SetGuidance("Set G4NeutronHPManager verbose level");
+  fG4NeutronHPVerboseCmd->SetParameterName("NeutronHPVerbose",false);
+  fG4NeutronHPVerboseCmd->AvailableForStates(G4State_PreInit,G4State_Idle);
+
+  fG4HadronicProcessStoreVerboseCmd
+    = new G4UIcmdWithAnInteger("/mcPhysics/g4HadronicProcessStoreVerbose", this);
+  fG4HadronicProcessStoreVerboseCmd
+    ->SetGuidance("Set G4NeutronHPManager verbose level");
+  fG4HadronicProcessStoreVerboseCmd
+    ->SetParameterName("HadronicProcessStoreVerbose",false);
+  fG4HadronicProcessStoreVerboseCmd
+    ->AvailableForStates(G4State_PreInit,G4State_Idle);
 }
 
 //______________________________________________________________________________
@@ -132,6 +152,8 @@ TG4ComposedPhysicsMessenger::~TG4ComposedPhysicsMessenger()
   delete fPrintVolumeLimitsCmd;
   delete fPrintGlobalCutsCmd;
   delete fPrintGlobalControlsCmd;
+  delete fG4NeutronHPVerboseCmd;
+  delete fG4HadronicProcessStoreVerboseCmd;
 }
 
 //
@@ -188,5 +210,15 @@ void TG4ComposedPhysicsMessenger::SetNewValue(G4UIcommand* command,
   }  
   else if (command == fPrintGlobalControlsCmd) {
     TG4G3PhysicsManager::Instance()->GetControlVector()->Print();
-  }  
+  }
+  else if (command == fG4NeutronHPVerboseCmd) {
+    G4NeutronHPManager::GetInstance()
+      ->SetVerboseLevel(
+          fG4NeutronHPVerboseCmd->GetNewIntValue(newValue));
+  }
+  else if (command == fG4HadronicProcessStoreVerboseCmd) {
+    G4HadronicProcessStore::Instance()
+      ->SetVerbose(
+          fG4HadronicProcessStoreVerboseCmd->GetNewIntValue(newValue));
+  }
 }
