diff --git a/CMakeLists.txt b/CMakeLists.txt
index a8c297a..adb1f61 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -9,7 +9,8 @@ set(DDS_PROTOCOL_VERSION "2")
 #
 # Check if cmake has the required version
 #
-cmake_minimum_required( VERSION 3.11.0 FATAL_ERROR )
+cmake_minimum_required( VERSION 3.16.0 FATAL_ERROR )
+cmake_policy(VERSION 3.16)
 
 set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake/modules")
 
@@ -125,23 +126,20 @@ set(MiscCommon_LOCATION
 if(APPLE)
 	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -stdlib=libc++ -Wthread-safety")
 	set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -lc++")
-
-	# In response to CMake 3.0 generating warnings regarding policy CMP0042,
-	# the OSX RPATH settings have been updated per recommendations found
-	# in the CMake Wiki: http://www.cmake.org/Wiki/CMake_RPATH_handling#Mac_OS_X_and_the_RPATH
-	set(CMAKE_MACOSX_RPATH ON)
-	set(CMAKE_SKIP_BUILD_RPATH FALSE)
-	set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
-	set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
-	set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
-	list(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES "${CMAKE_INSTALL_PREFIX}/lib" isSystemDir)
-	if("${isSystemDir}" STREQUAL "-1")
-		set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
-	endif()
-
 elseif(UNIX)
 	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -pthread")
-endif(APPLE)
+  set(CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS} "-Wl,--enable-new-dtags")
+  set(CMAKE_SHARED_LINKER_FLAGS ${CMAKE_SHARED_LINKER_FLAGS} "-Wl,--enable-new-dtags")
+endif()
+
+set(CMAKE_SKIP_BUILD_RPATH FALSE)
+set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
+set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
+set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
+list(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES "${CMAKE_INSTALL_PREFIX}/lib" isSystemDir)
+if("${isSystemDir}" STREQUAL "-1")
+  set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
+endif()
 
 #
 # global variables
@@ -380,63 +378,30 @@ set( WN_PKG_DIR "${CMAKE_BINARY_DIR}/dds-wrk-bin" )
 set( WN_PKG_NAME_ARCH "${WN_PKG_NAME}.tar.gz" )
 set( WN_PKG_REMOTE_DIR "/u/ddswww/web-docs/releases/add/${DDS_VERSION}" )
 
-set(DDS_BOOST_LIB_DIR ${Boost_LIBRARY_DIR})
-if("${DDS_BOOST_LIB_DIR}" STREQUAL "")
-	set(DDS_BOOST_LIB_DIR ${Boost_LIBRARY_DIR_RELEASE})
-endif()
-
-# because of SIP on macOS we can't use (DY)LD_LIBRARY_PATH.
-# But we need to search also in custom location for libstdc++ in case if user installs a custom version of gcc/clang.
-# WORKAROUND: We therefore introduce DDS_LD_LIBRARY_PATH, which user can use to specify custom library path(s)
-set(ENV_LD_LIBRARY_PATH "$ENV{DDS_LD_LIBRARY_PATH}")
-
-set(PREREQ_DIRS "$<TARGET_FILE_DIR:dds-user-defaults>::$<TARGET_FILE_DIR:dds_protocol_lib>::$<TARGET_FILE_DIR:dds_intercom_lib>::$<TARGET_FILE_DIR:dds_topology_lib>::$<TARGET_FILE_DIR:dds_ncf>::${DDS_BOOST_LIB_DIR}::${ENV_LD_LIBRARY_PATH}")
-set(DDS_AGENT_BIN_PATH $<TARGET_FILE:dds-agent>)
-set(DDS_PREREQ_SOURCE_BIN_PATH $<TARGET_FILE:dds-commander>)
-
-set(PREREQ_DESTINATION ${CMAKE_INSTALL_PREFIX}/lib)
+# top-level executables to package in wn pkg
+list(APPEND WN_PKG_TARGETS
+  $<TARGET_FILE:dds-agent>
+  $<TARGET_FILE:dds-user-defaults> )
+separate_arguments(CLI_WN_PKG_TARGETS
+  UNIX_COMMAND "${WN_PKG_TARGETS}" )
+
+# Generate a list of what CMake considers to be system prefixes
+list(APPEND WN_PKG_EXCLUDED_SYSTEM_PREFIXES
+  ${CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES}
+  ${CMAKE_INSTALL_LIBDIR} )
+list(REMOVE_DUPLICATES WN_PKG_EXCLUDED_SYSTEM_PREFIXES)
+separate_arguments(CLI_WN_PKG_EXCLUDED_SYSTEM_PREFIXES
+  UNIX_COMMAND "${WN_PKG_EXCLUDED_SYSTEM_PREFIXES}" )
 
-
-# WORKAROUND: don't generate helper script when building an xcode project
-# The reason: "Evaluation file to be written multiple times for different configurations or languages with different content"
-if (NOT CMAKE_GENERATOR STREQUAL "Xcode")
-	#
-	# WORKAROUND: the issue is configure_file currently does not appear to honor generator expressions,
-	# but it is still needed to configure @...@ expressions.
-	# We therefore use two-step procedure to configure a file.
-	#
-	# 1. Deal with @...@ configurable items:
-	configure_file(${CMAKE_SOURCE_DIR}/cmake/modules/DDS_CollectPrerequisitesGen.cmake.in ${CMAKE_CURRENT_BINARY_DIR}/cmake/modules/DDS_CollectPrerequisitesGen.cmake.configured @ONLY)
-	# 2. Deal with items configured with generator expressions (variables like "$<TARGET_FILE_DIR:" evaluted on this stage):
-	FILE(GENERATE OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/cmake/modules/DDS_CollectPrerequisitesGen.cmake
-			  INPUT ${CMAKE_CURRENT_BINARY_DIR}/cmake/modules/DDS_CollectPrerequisitesGen.cmake.configured CONDITION 1)
-
-	if( BUILD_TESTS )
-		set(DDS_PREREQ_SOURCE_BIN_PATH $<TARGET_FILE:dds_topology_lib-tests>)
-		#
-		# WORKAROUND: the issue is configure_file currently does not appear to honor generator expressions,
-		# but it is still needed to configure @...@ expressions.
-		# We therefore use two-step procedure to configure a file.
-		#
-		# 1. Deal with @...@ configurable items:
-		configure_file(${CMAKE_SOURCE_DIR}/cmake/modules/DDS_CollectPrerequisitesGen.cmake.in ${CMAKE_CURRENT_BINARY_DIR}/cmake/modules/DDS_CollectPrerequisitesGen_Tests.cmake.configured @ONLY)
-		# 2. Deal with items configured with generator expressions (variables like "$<TARGET_FILE_DIR:" evaluted on this stage):
-		FILE(GENERATE OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/cmake/modules/DDS_CollectPrerequisitesGen_Tests.cmake
-			  	INPUT ${CMAKE_CURRENT_BINARY_DIR}/cmake/modules/DDS_CollectPrerequisitesGen_Tests.cmake.configured CONDITION 1)
-	endif( BUILD_TESTS )
-endif()
-
-#
-# TODO: replace DDS_CollectPrerequisites.cmake by DDS_CollectPrerequisitesGen.cmake and make the script more generic
-#
 add_custom_target( wn_bin
-	COMMAND -mkdir -p ${WN_PKG_DIR}
-	COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:dds-agent> "${WN_PKG_DIR}"
-	COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:dds-user-defaults> "${WN_PKG_DIR}"
-	COMMAND ${CMAKE_COMMAND} -DPREREQ_DESTINATION=${WN_PKG_DIR} -DDDS_AGENT_BIN_PATH=${DDS_AGENT_BIN_PATH}
-		-DPREREQ_DIRS=${PREREQ_DIRS} -DDDS_BOOST_LIB_DIR=${DDS_BOOST_LIB_DIR} -P "${CMAKE_SOURCE_DIR}/cmake/modules/DDS_CollectPrerequisites.cmake"
+	COMMAND ${CMAKE_COMMAND} -E make_directory ${WN_PKG_DIR}
+  COMMAND ${CMAKE_COMMAND}
+    -DEXECUTABLES=${CLI_WN_PKG_TARGETS}
+    -DDESTINATION=${WN_PKG_DIR}
+    -DEXCLUDED_SYSTEM_PREFIXES=${CLI_WN_PKG_EXCLUDED_SYSTEM_PREFIXES}
+    -P "${CMAKE_SOURCE_DIR}/cmake/DDSCollectWNPkgFiles.cmake"
 	COMMAND ${CMAKE_COMMAND} -E tar czf ${WN_PKG_NAME_ARCH} "${WN_PKG_DIR}"
-	COMMAND -chmod go+xr ${WN_PKG_NAME_ARCH}
+	COMMAND chmod go+xr ${WN_PKG_NAME_ARCH}
 	COMMENT "Generate WN binary package"
 	VERBATIM )
 
@@ -457,19 +422,6 @@ add_dependencies( wn_bin_upload
 
 INSTALL(FILES ${CMAKE_BINARY_DIR}/${WN_PKG_NAME_ARCH} DESTINATION bin/wn_bins OPTIONAL)
 
-
-# WORKAROUND: don't generate helper script when building an xcode project
-# The reason: "Evaluation file to be written multiple times for different configurations or languages with different content"
-if (NOT CMAKE_GENERATOR STREQUAL "Xcode")
-	# WORKAROUND: create destination "lib" directory.
-	# INSTALL SCRIPT is called before any other lib is installed, therefore we need to create a dest. dir.
-	INSTALL(DIRECTORY DESTINATION lib)
-	INSTALL(SCRIPT ${CMAKE_CURRENT_BINARY_DIR}/cmake/modules/DDS_CollectPrerequisitesGen.cmake)
-	if( BUILD_TESTS )
-		INSTALL(SCRIPT ${CMAKE_CURRENT_BINARY_DIR}/cmake/modules/DDS_CollectPrerequisitesGen_Tests.cmake)
-	endif( BUILD_TESTS )
-endif()
-
 #
 # Package
 #
diff --git a/cmake/DDSCollectWNPkgFiles.cmake b/cmake/DDSCollectWNPkgFiles.cmake
new file mode 100644
index 0000000..1b31397
--- /dev/null
+++ b/cmake/DDSCollectWNPkgFiles.cmake
@@ -0,0 +1,24 @@
+# Copyright 2017-2022 GSI, Inc. All rights reserved.
+#
+#
+
+###################################################
+## Collect WN PKG files
+###################################################
+
+# Collect non-system dependencies
+file(GET_RUNTIME_DEPENDENCIES
+  RESOLVED_DEPENDENCIES_VAR deps
+  EXECUTABLES ${EXECUTABLES} )
+
+# Generate regex that excludes system prefixes
+list(JOIN EXCLUDED_SYSTEM_PREFIXES "|" excluded_system_prefix_regex)
+set(excluded_system_prefix_regex "^(${excluded_system_prefix_regex})/")
+
+# Copy dependencies to wn pkg staging directory
+foreach(file IN LISTS EXECUTABLES deps)
+  if(NOT file MATCHES ${excluded_system_prefix_regex})
+    message("WN PKG prerequisite='${file}'")
+    file(COPY ${file} DESTINATION ${DESTINATION})
+  endif()
+endforeach()
