--- CMakeLists.txt.orig	2016-06-06 06:46:57.000000000 -0700
+++ CMakeLists.txt	2016-06-06 06:48:16.000000000 -0700
@@ -6,7 +6,7 @@
 project(Geant4Py)
 #------------------------------------------------------------------------------
 # installation prefixes for libraries
-set(CMAKE_INSTALL_PREFIX ${PROJECT_SOURCE_DIR})
+set(CMAKE_INSTALL_PREFIX $ENV{SIMPATH_INSTALL})
 
 # debug mode
 set(DEBUG FALSE CACHE BOOL "Debug Mode (Debug On)")
@@ -33,6 +33,14 @@
 find_package(XercesC)
 find_package(ROOT)
 
+set(BOOST_INCLUDE_DIRS ${Boost_INCLUDE_DIR})
+
+if (CMAKE_SYSTEM_NAME MATCHES Darwin)
+      SET(CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS "${CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS} -flat_namespace -single_module -undefined dynamic_lookup")
+      SET(CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS "${CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS} -flat_namespace -single_module -undefined dynamic_lookup")
+      SET(CMAKE_SHARED_LIBRARY_SUFFIX ".so")
+endif()
+
 if(NOT GEANT4_FOUND)
   message(FATAL_ERROR "NOT Found Geant4.")
 endif()
--- source/gdml/pyG4GDMLParser.cc_orig	2014-02-27 18:12:18.000000000 +0100
+++ source/gdml/pyG4GDMLParser.cc	2014-05-06 16:26:53.000000000 +0200
@@ -81,6 +81,7 @@
     .def("GetWorldVolume",   &G4GDMLParser::GetWorldVolume,
          f_GetWorldVolume()
          [return_value_policy<reference_existing_object>()])
+    .def("GetVolumeAuxiliaryInformation",   &G4GDMLParser::GetVolumeAuxiliaryInformation, return_value_policy<return_by_value>())
     ;
 }
 
--- source/geometry/pyG4LogicalVolume.cc_orig	2014-02-27 18:12:19.000000000 +0100
+++ source/geometry/pyG4LogicalVolume.cc	2014-05-06 16:28:40.000000000 +0200
@@ -149,5 +149,6 @@
     // ---
     .def("SetBiasWeight",  &G4LogicalVolume::SetBiasWeight)
     .def("GetBiasWeight",  &G4LogicalVolume::GetBiasWeight)
+    .def("SetSensitiveDetector", &G4LogicalVolume::SetSensitiveDetector)
     ;
 }
--- source/geometry/pyG4VSolid.cc_orig	2014-02-27 18:12:19.000000000 +0100
+++ source/geometry/pyG4VSolid.cc	2014-05-06 16:28:40.000000000 +0200
@@ -32,7 +32,7 @@
 #include <boost/python.hpp>
 #include "G4Version.hh"
 #include "G4VSolid.hh"
-
+#include "G4String.hh"
 using namespace boost::python;
 
 // ====================================================================
--- source/particles/pyG4PrimaryVertex.cc.orig	2016-06-06 06:59:31.000000000 -0700
+++ source/particles/pyG4PrimaryVertex.cc	2016-06-06 06:58:18.000000000 -0700
@@ -52,6 +52,8 @@
 {
   class_<G4PrimaryVertex, G4PrimaryVertex*>
     ("G4PrimaryVertex", "primary vertex")
+     // constructors
+    .def(init<const G4ThreeVector&, const G4float&>())
     .def(init<>())
     .def(init<G4double, G4double, G4double, G4double>())
     .def(init<G4ThreeVector, G4double>())
@@ -73,6 +75,7 @@
     .def("SetPrimary",  &G4PrimaryVertex::SetPrimary)
     .def("GetWeight",   &G4PrimaryVertex::GetWeight)
     .def("SetWeight",   &G4PrimaryVertex::SetWeight)
+    .def("SetPrimary",   &G4PrimaryVertex::SetPrimary)
     .def("Print", &G4PrimaryVertex::Print)
     ;
 }
--- source/physics_lists/pyPhysicsLists.cc_orig	2018-05-09 09:18:41.000000000 +0200
+++ source/physics_lists/pyPhysicsLists.cc	2018-05-09 09:21:33.000000000 +0200
@@ -52,6 +52,7 @@
 #include "QGSP_INCLXX_HP.hh"
 #include "QGS_BIC.hh"
 #include "Shielding.hh"
+#include "G4PhysListFactory.hh"
 
 
 // macro for adding physics lists
@@ -80,6 +81,12 @@
   }
 }
 
+G4VModularPhysicsList* GetReferencePhysList(const G4String& name) {
+   G4PhysListFactory factory;
+   G4VModularPhysicsList* test = factory.GetReferencePhysList(name);
+   return test;
+}
+
 }
 
 using namespace pyPhysicsLists;
@@ -89,7 +96,10 @@
 // ====================================================================
 void export_PhysicsLists()
 {
+  def("GetReferencePhysList", GetReferencePhysList,
+         return_internal_reference<>());
   def("ListPhysicsList",   ListPhysicsList);
+  def("AddPhysicsList",    AddPhysicsList);
 
   ADD_PHYSICS_LIST(FTFP_BERT);
   ADD_PHYSICS_LIST(FTFP_BERT_ATL);
--- source/physics_lists/pymodG4physicslists.cc_orig	2014-02-27 18:12:19.000000000 +0100
+++ source/physics_lists/pymodG4physicslists.cc	2014-05-06 16:30:46.000000000 +0200
@@ -37,7 +37,6 @@
 // module definition
 // ====================================================================
 void export_PhysicsLists();
-
 BOOST_PYTHON_MODULE(G4physicslists)
 {
   export_PhysicsLists();
--- source/track/pyG4StepPoint.cc_orig 2014-02-27 18:12:19.000000000 +0100
+++ source/track/pyG4StepPoint.cc      2014-05-06 16:32:37.000000000 +0200
@@ -68,5 +68,10 @@
     .def("GetMass",               &G4StepPoint::GetMass)
     .def("GetCharge",             &G4StepPoint::GetCharge)
     .def("GetWeight",             &G4StepPoint::GetWeight)
+    .def("GetTouchableHandle",    &G4StepPoint::GetTouchable,  return_value_policy<reference_existing_object>())
+    .def("GetMaterial",           &G4StepPoint::GetMaterial,
+           return_value_policy<return_by_value>())
+                 .def("GetProcessDefinedStep", &G4StepPoint::GetProcessDefinedStep,
+             return_internal_reference<>())
     ;
 }
--- source/track/pyG4Track.cc_orig	2014-02-27 18:12:19.000000000 +0100
+++ source/track/pyG4Track.cc	2014-05-06 16:32:37.000000000 +0200
@@ -85,5 +85,6 @@
     	 return_value_policy<reference_existing_object>())
     .def("GetWeight",              &G4Track::GetWeight)
     .def("SetWeight",              &G4Track::SetWeight)
+    .def("SetTrackStatus",         &G4Track::SetTrackStatus)
     ;
 }
--- site-modules/geometries/ezgeom/G4EzVolume.hh_orig	2014-07-15 12:28:53.000000000 +0200
+++ site-modules/geometries/ezgeom/G4EzVolume.hh	2014-07-15 12:37:24.000000000 +0200
@@ -65,9 +65,26 @@
   ~G4EzVolume();
 
   // createing volume
+  void Subtract(G4Material* amaterial,G4EzVolume* A, G4EzVolume* B);
+  void Add(G4Material* amaterial,G4EzVolume* A, G4EzVolume* B);
+  void Intersect(G4Material* amaterial,G4EzVolume* A, G4EzVolume* B);
   void CreateBoxVolume(G4Material* amaterial,
 		       G4double dx, G4double dy, G4double dz);
 
+  void CreateTrapezoidVolume(G4Material* amaterial, 
+            G4double  pDz,   G4double  pTheta,
+             G4double  pPhi,  G4double  pDy1,
+             G4double  pDx1,  G4double  pDx2,
+             G4double  pAlp1, G4double  pDy2,
+             G4double  pDx3,  G4double  pDx4,
+             G4double  pAlp2);
+
+  void CreateTrapVolume(G4Material* amaterial, 
+			G4double pZ, G4double pY, G4double pX, G4double pLTX);
+
+  void CreateTrdVolume(G4Material* amaterial, 
+		 G4double dx1, G4double dx2, G4double dy1, G4double dy2, G4double dz);  
+
   void CreateTubeVolume(G4Material* amaterial,
 			G4double rmin, G4double rmax, 
 			G4double dz,
--- site-modules/geometries/ezgeom/pyEzgeom.cc_orig	2014-07-15 12:29:10.000000000 +0200
+++ site-modules/geometries/ezgeom/pyEzgeom.cc	2014-07-15 12:43:50.000000000 +0200
@@ -118,6 +118,9 @@
   class_<G4EzVolume>("G4EzVolume", "an easy way of geometry configuration")
     .def(init<const G4String&>())
     // ---
+    .def("Subtract",      &G4EzVolume::Subtract)
+    .def("Add",      &G4EzVolume::Add)
+    .def("Intersect",      &G4EzVolume::Intersect)
     .def("CreateBoxVolume",     &G4EzVolume::CreateBoxVolume)
     .def("CreateTubeVolume",    &G4EzVolume::CreateTubeVolume,
 	                        f_CreateTubeVolume())
@@ -126,6 +129,9 @@
     .def("CreateShpereVolume",  &G4EzVolume::CreateSphereVolume,
 	                        f_CreateSphereVolume())
     .def("CreateOrbVolume",     &G4EzVolume::CreateOrbVolume)
+    .def("CreateTrapezoidVolume",    &G4EzVolume::CreateTrapezoidVolume)
+    .def("CreateTrapVolume",    &G4EzVolume::CreateTrapVolume)
+    .def("CreateTrdVolume",     &G4EzVolume::CreateTrdVolume)
     // ---
     .def("SetSold",             &G4EzVolume::SetSolid)
     .def("GetSold",             &G4EzVolume::GetSolid,
--- source/particles/pyG4PrimaryParticle.cc.orig	2016-06-06 06:43:27.000000000 -0700
+++ source/particles/pyG4PrimaryParticle.cc	2016-06-06 07:12:50.000000000 -0700
@@ -42,6 +42,8 @@
 {
   class_<G4PrimaryParticle, G4PrimaryParticle*>
     ("G4PrimaryParticle", "primary particle")
+    // constructors
+    .def(init<const G4int&>())
     .def(init<G4int>())
     // ---
     .add_property("Px", &G4PrimaryParticle::GetPx)
@@ -77,5 +79,7 @@
     .def("GetWeight",   &G4PrimaryParticle::GetWeight)
     .def("SetWeight",   &G4PrimaryParticle::SetWeight)
     .def("GetProperTime", &G4PrimaryParticle::GetProperTime)
+    .def("GetParticleDefinition",   &G4PrimaryParticle::GetParticleDefinition,
+          return_internal_reference<>())     ;
     ;
 }
--- site-modules/geometries/ezgeom/G4EzVolume.cc_orig	2014-07-15 14:05:45.000000000 +0200
+++ site-modules/geometries/ezgeom/G4EzVolume.cc	2014-07-15 14:06:39.000000000 +0200
@@ -31,11 +31,16 @@
 // ====================================================================
 #include "G4Material.hh"
 #include "G4Box.hh"
+#include "G4Trd.hh"
+#include "G4Trap.hh"
 #include "G4Tubs.hh"
 #include "G4Cons.hh"
 #include "G4Sphere.hh"
 #include "G4Orb.hh"
 #include "G4PVPlacement.hh"
+#include "G4SubtractionSolid.hh"
+#include "G4IntersectionSolid.hh"
+#include "G4UnionSolid.hh"
 #include "G4PVReplica.hh"
 #include "G4PVParameterised.hh"
 #include "G4VisAttributes.hh"
@@ -76,6 +81,59 @@
 {
 }
 
+///////////////////////////////////////////////////////////////////////
+void G4EzVolume::Subtract(G4Material* amaterial,G4EzVolume* A, G4EzVolume* B)
+///////////////////////////////////////////////////////////////////////
+{
+  if(lv !=0 ) {
+    G4cout << "%%% Warning (G4EzVolume): volume is already created."
+	   << G4endl;
+    return;
+  }
+    const G4VSolid* solidA = A->GetSolid();
+    const G4VSolid* solidB = B->GetSolid();
+    solid = new G4SubtractionSolid(name, const_cast<G4VSolid*>(solidA), const_cast<G4VSolid*>(solidB));
+    lv    = new G4LogicalVolume (solid,amaterial,name);
+  // vis. attributes
+    va= new G4VisAttributes();
+    lv-> SetVisAttributes(va);
+}
+
+///////////////////////////////////////////////////////////////////////
+void G4EzVolume::Add(G4Material* amaterial,G4EzVolume* A, G4EzVolume* B)
+///////////////////////////////////////////////////////////////////////
+{
+  if(lv !=0 ) {
+    G4cout << "%%% Warning (G4EzVolume): volume is already created."
+	   << G4endl;
+    return;
+  }
+   const G4VSolid* solidA = A->GetSolid();
+   const G4VSolid* solidB = B->GetSolid();
+   solid = new G4UnionSolid(name, const_cast<G4VSolid*>(solidA), const_cast<G4VSolid*>(solidB));
+   lv    = new G4LogicalVolume (solid,amaterial,name);
+  // vis. attributes
+    va= new G4VisAttributes();
+    lv-> SetVisAttributes(va);
+}
+
+///////////////////////////////////////////////////////////////////////
+void G4EzVolume::Intersect(G4Material* amaterial,G4EzVolume* A, G4EzVolume* B)
+///////////////////////////////////////////////////////////////////////
+{
+  if(lv !=0 ) {
+    G4cout << "%%% Warning (G4EzVolume): volume is already created."
+	   << G4endl;
+    return;
+  }
+    const G4VSolid* solidA = A->GetSolid();
+    const G4VSolid* solidB = B->GetSolid();
+    solid = new G4IntersectionSolid(name, const_cast<G4VSolid*>(solidA), const_cast<G4VSolid*>(solidB));
+    lv    = new G4LogicalVolume (solid,amaterial,name);
+  // vis. attributes
+    va= new G4VisAttributes();
+    lv-> SetVisAttributes(va);
+}
 
 ///////////////////////////////////////////////////////////////////////
 void G4EzVolume::CreateBoxVolume(G4Material* amaterial, 
@@ -96,6 +148,66 @@
   lv-> SetVisAttributes(va);
 }
 
+///////////////////////////////////////////////////////////////////////
+void G4EzVolume::CreateTrapezoidVolume(G4Material* amaterial, 
+	     G4double  pDz,   G4double  pTheta,
+             G4double  pPhi,  G4double  pDy1,
+             G4double  pDx1,  G4double  pDx2,
+             G4double  pAlp1, G4double  pDy2,
+             G4double  pDx3,  G4double  pDx4,
+             G4double  pAlp2)
+///////////////////////////////////////////////////////////////////////
+{
+  if(lv !=0 ) {
+    G4cout << "%%% Warning (G4EzVolume): volume is already created."
+	   << G4endl;
+    return;
+  }
+
+  solid= new G4Trap(name,pDz,pTheta,pPhi,pDy1,pDx1,pDx2,pAlp1,pDy2,pDx3,pDx4,pAlp2);
+  lv= new G4LogicalVolume(solid, amaterial, name);
+
+  // vis. attributes
+  va= new G4VisAttributes();
+  lv-> SetVisAttributes(va);
+}
+
+///////////////////////////////////////////////////////////////////////
+void G4EzVolume::CreateTrdVolume(G4Material* amaterial, 
+		 G4double dx1, G4double dx2, G4double dy1, G4double dy2, G4double dz)
+///////////////////////////////////////////////////////////////////////
+{
+  if(lv !=0 ) {
+    G4cout << "%%% Warning (G4EzVolume): volume is already created."
+	   << G4endl;
+    return;
+  }
+
+  solid= new G4Trd(name, dx1, dx2, dy1, dy2, dz);
+  lv= new G4LogicalVolume(solid, amaterial, name);
+
+  // vis. attributes
+  va= new G4VisAttributes();
+  lv-> SetVisAttributes(va);
+}
+///////////////////////////////////////////////////////////////////////
+void G4EzVolume::CreateTrapVolume(G4Material* amaterial, 
+				 G4double pZ, G4double pY, G4double pX, G4double pLTX)
+///////////////////////////////////////////////////////////////////////
+{
+  if(lv !=0 ) {
+    G4cout << "%%% Warning (G4EzVolume): volume is already created."
+	   << G4endl;
+    return;
+  }
+
+  solid= new G4Trap(name, pZ, pY, pX, pLTX);
+  lv= new G4LogicalVolume(solid, amaterial, name);
+
+  // vis. attributes
+  va= new G4VisAttributes();
+  lv-> SetVisAttributes(va);
+}
 
 ////////////////////////////////////////////////////////////////////////////
 void G4EzVolume::CreateTubeVolume(G4Material* amaterial,
