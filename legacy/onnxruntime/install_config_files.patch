diff --git a/cmake/ONNXRuntimeConfig.cmake b/cmake/ONNXRuntimeConfig.cmake
new file mode 100644
index 000000000..28a7dcb58
--- /dev/null
+++ b/cmake/ONNXRuntimeConfig.cmake
@@ -0,0 +1,37 @@
+# Custom cmake config file by fuhlig to enable find_package(ONNXRuntime)
+# Inspired by https://stackoverflow.com/a/66494534
+#
+# This will define the following variables:
+#   ONNXRuntime_FOUND        -- True if the system has the onnxruntime library
+#   ONNXRuntime_INCDIR -- The include directories for onnxruntime
+#   ONNXRuntime_LIBDIR    -- Libraries to link against
+#   ONNXRuntime_CXX_FLAGS    -- Additional (required) compiler flags
+
+get_filename_component(PACKAGE_PREFIX_DIR "${CMAKE_CURRENT_LIST_DIR}/../../../" ABSOLUTE)
+
+macro(set_and_check _var _file)
+  set(${_var} "${_file}")
+  if(NOT EXISTS "${_file}")
+    message(FATAL_ERROR "File or directory ${_file} referenced by variable ${_var} does not exist !")
+  endif()
+endmacro()
+
+### General variables for project discovery/inspection
+set(ONNXRuntime_VERSION 1.12.1)
+
+set_and_check(ONNXRuntime_PREFIX ${PACKAGE_PREFIX_DIR})
+set(ONNXRuntime_INCDIR ${PACKAGE_PREFIX_DIR}/include)
+set(ONNXRuntime_INCDIRS ${PACKAGE_PREFIX_DIR}/include)
+set_and_check(ONNXRuntime_LIBDIR ${PACKAGE_PREFIX_DIR}/lib)
+
+find_library(ONNXRuntime_LIBRARY onnxruntime
+    PATHS ${ONNXRuntime_LIBDIR}
+)
+
+# Create imported target ONNXRuntime::ONNXRuntime
+add_library(ONNXRuntime::ONNXRuntime SHARED IMPORTED)
+
+set_target_properties(ONNXRuntime::ONNXRuntime PROPERTIES
+  IMPORTED_LOCATION "${ONNXRuntime_LIBRARY}"
+  INTERFACE_INCLUDE_DIRECTORIES "${ONNXRuntime_INCDIRS}"
+)
diff --git a/cmake/ONNXRuntimeConfigVersion.cmake b/cmake/ONNXRuntimeConfigVersion.cmake
new file mode 100644
index 000000000..60b275f9b
--- /dev/null
+++ b/cmake/ONNXRuntimeConfigVersion.cmake
@@ -0,0 +1,48 @@
+# This is a basic version file for the Config-mode of find_package().
+# It is used by write_basic_package_version_file() as input file for configure_file()
+# to create a version-file which can be installed along a config.cmake file.
+#
+# The created file sets PACKAGE_VERSION_EXACT if the current version string and
+# the requested version string are exactly the same and it sets
+# PACKAGE_VERSION_COMPATIBLE if the current version is >= requested version.
+# The variable CVF_VERSION must be set before calling configure_file().
+
+set(PACKAGE_VERSION "1.12.1")
+
+if (PACKAGE_FIND_VERSION_RANGE)
+  # Package version must be in the requested version range
+  if ((PACKAGE_FIND_VERSION_RANGE_MIN STREQUAL "INCLUDE" AND PACKAGE_VERSION VERSION_LESS PACKAGE_FIND_VERSION_MIN)
+      OR ((PACKAGE_FIND_VERSION_RANGE_MAX STREQUAL "INCLUDE" AND PACKAGE_VERSION VERSION_GREATER PACKAGE_FIND_VERSION_MAX)
+        OR (PACKAGE_FIND_VERSION_RANGE_MAX STREQUAL "EXCLUDE" AND PACKAGE_VERSION VERSION_GREATER_EQUAL PACKAGE_FIND_VERSION_MAX)))
+    set(PACKAGE_VERSION_COMPATIBLE FALSE)
+  else()
+    set(PACKAGE_VERSION_COMPATIBLE TRUE)
+  endif()
+else()
+  if(PACKAGE_VERSION VERSION_LESS PACKAGE_FIND_VERSION)
+    set(PACKAGE_VERSION_COMPATIBLE FALSE)
+  else()
+    set(PACKAGE_VERSION_COMPATIBLE TRUE)
+    if(PACKAGE_FIND_VERSION STREQUAL PACKAGE_VERSION)
+      set(PACKAGE_VERSION_EXACT TRUE)
+    endif()
+  endif()
+endif()
+
+
+# if the installed project requested no architecture check, don't perform the check
+if("FALSE")
+  return()
+endif()
+
+# if the installed or the using project don't have CMAKE_SIZEOF_VOID_P set, ignore it:
+if("${CMAKE_SIZEOF_VOID_P}" STREQUAL "" OR "8" STREQUAL "")
+  return()
+endif()
+
+# check that the installed version has the same 32/64bit-ness as the one which is currently searching:
+if(NOT CMAKE_SIZEOF_VOID_P STREQUAL "8")
+  math(EXPR installedBits "8 * 8")
+  set(PACKAGE_VERSION "${PACKAGE_VERSION} (${installedBits}bit)")
+  set(PACKAGE_VERSION_UNSUITABLE TRUE)
+endif()
diff --git a/cmake/onnxruntime.cmake b/cmake/onnxruntime.cmake
index 700a0e264..e659b1390 100644
--- a/cmake/onnxruntime.cmake
+++ b/cmake/onnxruntime.cmake
@@ -304,3 +304,7 @@ if(onnxruntime_BUILD_APPLE_FRAMEWORK)
   # link the static library
   add_custom_command(TARGET onnxruntime POST_BUILD COMMAND libtool -static -o ${STATIC_FRAMEWORK_DIR}/onnxruntime *.a WORKING_DIRECTORY ${STATIC_LIB_DIR})
 endif()
+
+install(FILES ${PROJECT_SOURCE_DIR}/ONNXRuntimeConfig.cmake
+        ${PROJECT_SOURCE_DIR}/ONNXRuntimeConfigVersion.cmake
+        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake)
